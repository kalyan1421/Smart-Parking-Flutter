// Firestore Security Rules for Smart Parking App
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    function isParkingOperator() {
      return isAuthenticated() && (getUserRole() == 'parkingOperator' || getUserRole() == 'admin');
    }
    
    function isValidUser() {
      return isAuthenticated() && (getUserRole() == 'user' || getUserRole() == 'parkingOperator' || getUserRole() == 'admin');
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if isOwner(userId);
      
      // Admins can read all users
      allow read: if isAdmin();
      
      // Parking operators can read basic user info for bookings
      allow read: if isParkingOperator() && 
        resource.data.keys().hasAll(['id', 'displayName', 'email', 'phoneNumber']);
      
      // Allow user creation during registration
      allow create: if isAuthenticated() && 
        request.auth.uid == userId &&
        request.resource.data.keys().hasAll(['email', 'displayName', 'role', 'createdAt', 'updatedAt']) &&
        request.resource.data.role == 'user';
    }
    
    // Vehicles collection
    match /vehicles/{vehicleId} {
      // Users can read/write their own vehicles
      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow creation if user owns the vehicle
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'licensePlate', 'make', 'model', 'type', 'createdAt', 'updatedAt']);
      
      // Admins can read all vehicles
      allow read: if isAdmin();
      
      // Parking operators can read vehicles for verification
      allow read: if isParkingOperator();
    }
    
    // Parking spots collection (parkingSpots)
    match /parkingSpots/{spotId} {
      // ALL authenticated users can read parking spots (for discovery)
      allow read: if isAuthenticated();
      
      // STRICT RULE: Only admins can create/update/delete parking spots
      // Regular users CANNOT modify parking spots - only admin app can
      allow create, update, delete: if isAdmin();
    }
    
    // Legacy parking_spots collection (for backward compatibility)
    match /parking_spots/{spotId} {
      // ALL authenticated users can read parking spots (for discovery)
      allow read: if isAuthenticated();
      
      // STRICT RULE: Only admins can create/update/delete parking spots
      allow create, update, delete: if isAdmin();
    }
    
    // Bookings collection
    match /bookings/{bookingId} {
      // Users can read their own bookings
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Parking operators can read bookings for their spots
      allow read: if isParkingOperator() && 
        get(/databases/$(database)/documents/parkingSpots/$(resource.data.parkingSpotId)).data.ownerId == request.auth.uid;
      
      // Admins can read all bookings
      allow read: if isAdmin();
      
      // Users can create bookings for themselves
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'parkingSpotId', 'vehicleId', 'startTime', 'endTime', 'totalPrice', 'status', 'createdAt', 'updatedAt']) &&
        request.resource.data.status == 'pending';
      
      // Users can update their own bookings (for cancellation)
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        (request.resource.data.status == 'cancelled' || 
         request.resource.data.keys().hasOnly(['feedback', 'updatedAt']));
      
      // Parking operators can update bookings for their spots
      allow update: if isParkingOperator() && 
        get(/databases/$(database)/documents/parkingSpots/$(resource.data.parkingSpotId)).data.ownerId == request.auth.uid &&
        (request.resource.data.status in ['confirmed', 'active', 'completed'] ||
         request.resource.data.keys().hasOnly(['checkedInAt', 'checkedOutAt', 'updatedAt']));
      
      // Admins can update any booking
      allow update: if isAdmin();
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if isValidUser();
      
      // Users can create reviews for their completed bookings
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'parkingSpotId', 'bookingId', 'rating', 'createdAt']) &&
        request.resource.data.rating is number &&
        request.resource.data.rating >= 1 &&
        request.resource.data.rating <= 5;
      
      // Users can update their own reviews
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Users can delete their own reviews
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Admins can manage all reviews
      allow write: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasOnly(['isRead', 'updatedAt']);
      
      // System can create notifications
      allow create: if isAuthenticated();
      
      // Admins can manage all notifications
      allow write: if isAdmin();
    }
    
    // Payment transactions collection
    match /transactions/{transactionId} {
      // Users can read their own transactions
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Parking operators can read transactions for their spots
      allow read: if isParkingOperator() && 
        get(/databases/$(database)/documents/parkingSpots/$(resource.data.parkingSpotId)).data.ownerId == request.auth.uid;
      
      // System can create transactions
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Admins can read all transactions
      allow read: if isAdmin();
    }
    
    // Analytics collection (admin only)
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // System configuration (admin only)
    match /config/{document=**} {
      allow read: if isValidUser();
      allow write: if isAdmin();
    }
    
    // Reports collection
    match /reports/{reportId} {
      // Users can create reports
      allow create: if isAuthenticated() && 
        request.resource.data.reportedBy == request.auth.uid;
      
      // Users can read their own reports
      allow read: if isAuthenticated() && resource.data.reportedBy == request.auth.uid;
      
      // Admins can manage all reports
      allow read, write: if isAdmin();
    }
    
    // SUPER ADMIN RULE: Admins can access ANY document in ANY collection
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}
